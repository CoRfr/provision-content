#!/usr/bin/env bash
# Kubernetes Rebar Integrated Boot (KRIB) Kubeadm Installer
set -e

# Get access and who we are.
{{template "setup.tmpl" .}}

echo "Run helm install on the master (skip for minions)..."

{{if .ParamExists "krib/cluster-profile" -}}
CLUSTER_PROFILE={{.Param "krib/cluster-profile"}}
PROFILE_TOKEN={{.GenerateProfileToken (.Param "krib/cluster-profile") 7200}}
{{else -}}
echo "Missing krib/cluster-profile on the machine!"
exit 1
{{end -}}

{{template "krib-lib.sh.tmpl" .}}

MASTER_INDEX=$(find_me $KRIB_MASTERS_PARAM "Uuid" $RS_UUID)
echo "My Master index is $MASTER_INDEX"
if [[ $MASTER_INDEX != notme ]] ; then

  if [[ $MASTER_INDEX == 0 ]] ; then

    echo "I am the elected leader - I can run helm for the cluster"

    # help requires the admin config
    export KUBECONFIG="/etc/kubernetes/admin.conf"
    echo "Making sure Tiller is running"
    if [[ -z $(kubectl get pods --namespace kube-system --field-selector=status.phase==Running | grep tiller) ]] ; then
      echo "Tiller NOT running - something went wrong with helm init"
      exit 1
    fi

    echo "Running Helm Install for all helm/charts"
    {{range $index, $chart := .Param "helm/charts"}}
      echo "Installing {{$chart.name}} (from {{$chart.chart}})..."

      if [[ -z $(helm list {{$chart.name}}) ]] ; then

        {{range $index, $before := $chart.kubectlbefore}}
        kubectl {{$before}}
        {{end}}

        {{if $chart.targz}}
        curl -L "{{$chart.targz}}" | tar xz
        {{end}}

        helm install {{$chart.chart}} --name {{$chart.name}} \
          {{if $chart.namespace}} --namespace {{$chart.namespace}}{{end}} \
          {{range $param, $value := $chart.params}} --{{$param}} {{$value}}{{end}}

        {{if $chart.sleep}}
          echo "sleep {{$chart.sleep}}"
          sleep {{$chart.sleep}}
        {{else}}
          sleep 10s
        {{end}}

        {{if $chart.wait}}
          set +e
          ESCAPE=0
          while [[ $ESCAPE -lt 30 && -z $(helm list {{$chart.name}} | grep DEPLOYED) ]] ; do
            echo "helm list {{$chart.name}} is not deployed. $ESCAPE"
            {{if $chart.sleep}}
              sleep {{$chart.sleep}}
            {{else}}
              sleep 10
            {{end}}
            ((ESCAPE=ESCAPE+1))
          done
          set -e
        {{else}}
          echo "let's go! I'm not waiting for chart to be ready"
        {{end}}

        {{if and $chart.wait $chart.namespace}}
          set +e
          ESCAPE=0
          while [[ $ESCAPE -lt 30 && ! -z $(kubectl get pods --namespace={{$chart.namespace}} | grep ContainerCreating) ]] ; do
            echo "kubectl get pods --namespace={{$chart.namespace}} is still creating containers. $ESCAPE"
            {{if $chart.sleep}}
              sleep {{$chart.sleep}}
            {{else}}
              sleep 10
            {{end}}
            ((ESCAPE=ESCAPE+1))
          done
          set -e
        {{end}}

        {{range $index, $after := $chart.kubectlafter}}
        kubectl {{$after}}
        {{end}}

        echo "========= done {{$chart.name}} ==========="

      else
        echo "skipping {{$chart.name}}.  It is already installed"
      fi

    {{else}}
      echo "No charts included in helm/charts to install"
    {{end}}

  else

    echo "I was not the leader, skipping helm install"

  fi

else

  echo "I am a worker - no helm actions"

fi

echo "Finished successfully"
exit 0

