#!/usr/bin/env bash
# Kubernetes Rebar Immutable Boot (KRIB) Kubeadm Installer
set -e

# Get access and who we are.
{{template "setup.tmpl" .}}

# Skip the remainder of this template if this host is not a master in a selective-master deployment
{{template "krib-skip-if-not-master.tmpl" .}}

{{if .ParamExists "krib/cluster-profile" -}}
CLUSTER_PROFILE={{.Param "krib/cluster-profile"}}
PROFILE_TOKEN={{.GenerateProfileToken (.Param "krib/cluster-profile") 7200}}
{{else -}}
xiterr 1 "Missing krib/cluster-profile on the machine!"
{{end -}}

{{template "krib-lib.sh.tmpl" .}}
export RS_UUID="{{.Machine.UUID}}"

{{if .ParamExists "consul/servers" -}}
get_endpoints() {
  ENDPOINTS=""
  {{ $port := .Param "etcd/client-port" -}}
  {{- range $elem := .Param "consul/servers"}}
  PEERS="${ENDPOINTS},https://{{ $elem.Address }}:{{ $port }}"
  {{ end -}}
  ENDPOINTS="--endpoints=${ENDPOINTS:1}"
  echo ${ENDPOINTS}
}

get_member_list() {
  set +e
  ENDPOINTS=$1
  export ETCDCTL_API=3
  echo `etcdctl --cert=/etc/kubernetes/pki/etcd/client.pem \
   --key=/etc/kubernetes/pki/etcd/client-key.pem \
   --cacert=/etc/kubernetes/pki/etcd/server-ca.pem \
   --endpoints=${ENDPOINTS} \
   member list 2>/dev/null`
  set -e
}

get_member_id() {
  set +e
  ENDPOINTS=$1
  export ETCDCTL_API=3
  MEMBER_ID=`etcdctl --cert=/etc/kubernetes/pki/etcd/client.pem \
   --key=/etc/kubernetes/pki/etcd/client-key.pem \
   --cacert=/etc/kubernetes/pki/etcd/server-ca.pem \
   --endpoints=${ENDPOINTS} \
   member list | grep ${ETCD_IP} | awk -F', ' '{print $1}'`
  set -e
  echo ${MEMBER_ID}
}
{{ end -}}


CONSUL_VERSION="{{ .Param "consul/version" }}"

TMP_DIR=/tmp/consul-tmp
INSTALL_DIR=/usr/local/bin
mkdir -p ${TMP_DIR}

echo "Configure the consul cluster"

CONSUL_DC_NAME={{.Param "consul/name"}}
{{ if .ParamExists "consul/ip" -}}
CONSUL_IP={{ .Param "consul/ip" }}
{{ else -}}
ETCD_IP={{ .Machine.Address }}
{{ end -}}

{{if eq (.ParamExists "etcd/servers") false -}}
# add server management params if missing
echo "Add initial variables to track members."
drpcli -T "$PROFILE_TOKEN" profiles add "$CLUSTER_PROFILE" param "etcd/servers" to "[]" || true
{{ end -}}

{{if eq (.ParamExists "etcd/servers-done") false -}}
drpcli -T "$PROFILE_TOKEN" profiles add "$CLUSTER_PROFILE" param "etcd/servers-done" to "[]" || true
{{ end -}}

# Get the number of servers to create
ETCD_SERVER_COUNT={{.Param "etcd/server-count"}}
echo "Creating $ETCD_SERVER_COUNT servers"



echo "Download consul version: v${CONSUL_VERSION}"
# Allow for a local repository for installation files
{{if .ParamExists "krib/package-repository" -}}
KRIB_REPO={{.Param "krib/package-repository"}}
{{end -}}

if [[ ! -z "$KRIB_REPO" ]] ; then
  download -L ${KRIB_REPO}/consul_${CONSUL_VERSION}_linux_amd64.zip  -o ${TMP_DIR}/consul_${CONSUL_VERSION}_linux_amd64.zip
else
  download -L https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip -o ${TMP_DIR}/consul_${CONSUL_VERSION}_linux_amd64.zip
fi

echo "Install consul version: ${CONSUL_VERSION}"
yum -y install unzip || echo "Unzip already installed"
unzip -o ${TMP_DIR}/consul_${CONSUL_VERSION}_linux_amd64.zip -d ${INSTALL_DIR}

# Now we create the systemd service
echo "Creating systemd service"
cat << EOF > /etc/systemd/system/consul.service
### BEGIN INIT INFO
# Provides:          consul
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Consul agent
# Description:       Consul service discovery framework
### END INIT INFO

[Unit]
Description=Consul server agent
Requires=network-online.target
After=network-online.target

[Service]
User=consul
Group=consul
PIDFile=/var/run/consul/consul.pid
PermissionsStartOnly=true
ExecStartPre=-/bin/mkdir -p /var/run/consul
ExecStartPre=/bin/chown -R consul:consul /var/run/consul
ExecStart=/usr/local/bin/consul agent \
    -config-file=/etc/consul.d/consul.json \
    -pid-file=/var/run/consul/consul.pid
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
KillSignal=SIGTERM
Restart=on-failure
RestartSec=42s

[Install]
WantedBy=multi-user.target
EOF

# Add the consul user if it doesn't exist
id -u consul &>/dev/null || ( echo "Creating consul user"; useradd consul -d /var/lib/consul )

systemctl daemon-reload
systemctl enable consul
systemctl start consul

# clean up
rm -rf ${TMP_DIR}

# exit cleanly
exit 0
