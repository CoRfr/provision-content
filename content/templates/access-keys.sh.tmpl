#!/bin/bash
#
# This template populates the root's authorized keys file
# and makes sure that the sshd config for PermitRootLogin is populated.
#
# Runs as part of a shell script for kickstart or net-post-install
# The template does nothing if access-keys is undefined
#
# Required Parameters: access-keys
# Optional Parameters: access-ssh-root-mode
#
# Parameter YAML format:
#
# access-keys:
#   greg:  ssh-rsa key
#   greg2:  ssh-rsa key
# access-ssh-root-mode: "without-password|yes|no|forced-commands-only"
#
# Defaults:
# access-keys - empty
# access-ssh-root-mode - defaults to "without-password" if unspecified
#

{{if .ParamExists "access-keys"}}
KEYS=/root/.ssh/authorized_keys
TMP_KEYS=$(mktemp /tmp/authorized_keys.tmp.XXXXXXX)
echo "Putting ssh access keys for root in place"
mkdir -p /root/.ssh
cat >>$KEYS <<EOFSSHACCESS
{{range $key := .Param "access-keys" -}}
{{$key -}}
{{end}}
EOFSSHACCESS
# if the we are called multiple times we get duplicate keys, lets fix that
cat $KEYS | sort -u > $TMP_KEYS
[[ -s "$TMP_KEYS" ]] && cp $TMP_KEYS $KEYS
[[ -f "$TMP_KEYS" ]] && rm -f $TMP_KEYS
chmod 600 $KEYS
{{end}}

echo "Updating SSHD default values"
sed --in-place -r -e '/^#?PermitRootLogin/ s/^#//' -e '/^#?PermitRootLogin/ s/prohibit-password/{{if .ParamExists "access-ssh-root-mode"}}{{.Param "access-ssh-root-mode"}}{{else}}without-password{{end}}/' /etc/ssh/sshd_config

# Restart sshd but os badness.
. /etc/os-release
# Ignore error because we may run in a place that doesn't have ssh installed
if [[ "$ID" == "ubuntu" || "$ID" == "debian" ]] ; then
    echo "Restarting ssh"
    service ssh restart || true
else
    echo "Restarting sshd"
    service sshd restart || true
fi

echo "Finished updating access keys successfully"
exit 0
