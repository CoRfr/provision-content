---
Name: "discovery"
Description: "The boot environment to use to have unknown machines boot to default Stage/BootEnv"
OnlyUnknown: true
OS:
  Family: "redhat"
  Name: "sledgehammer/0ac44f5ec55444cc505312f6dbc85dfc443053d5"
  IsoFile: "sledgehammer-0ac44f5ec55444cc505312f6dbc85dfc443053d5.tar"
  IsoUrl: "http://rackn-sledgehammer.s3-website-us-west-2.amazonaws.com/sledgehammer/0ac44f5ec55444cc505312f6dbc85dfc443053d5/sledgehammer-0ac44f5ec55444cc505312f6dbc85dfc443053d5.tar"
Kernel: "vmlinuz0"
Initrds:
  - "stage1.img"
BootParams: >-
  rootflags=loop
  root=live:/sledgehammer.iso
  rootfstype=auto
  ro
  liveimg
  rd_NO_LUKS
  rd_NO_MD
  rd_NO_DM
  provisioner.web={{.ProvisionerURL}}
  --
  {{if .ParamExists "kernel-console"}}{{.Param "kernel-console"}}{{end}}
OptionalParams:
  - "kernel-console"
Templates:
  - Name: "pxelinux"
    Path: "pxelinux.cfg/default"
    Contents: |
      DEFAULT discovery
      PROMPT 0
      TIMEOUT 10
      LABEL discovery
        KERNEL {{.Env.PathFor "tftp" .Env.Kernel}}
        INITRD {{.Env.JoinInitrds "tftp"}}
        APPEND {{.BootParams}}
        IPAPPEND 2
  - Name: "ipxe"
    Path: "default.ipxe"
    Contents: |
      #!ipxe
      chain {{.ProvisionerURL}}/${netX/mac}.ipxe && exit || goto chainip
      :chainip
      chain {{.ProvisionerURL}}/${netX/ip}.ipxe && exit || goto sledgehammer
      :sledgehammer
      kernel {{.Env.PathFor "http" .Env.Kernel}} {{.BootParams}} BOOTIF=01-${netX/mac:hexhyp}
      initrd {{.Env.PathFor "http" (index .Env.Initrds 0)}}
      boot
  - Name: "start-up.sh"
    Path: "machines/start-up.sh"
    Contents: |
      #!/bin/bash
      export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

      get_macs() {
          local maclist=""
          local nic=""
          for nic in /sys/class/net/*; do
              [[ -f $nic/type && -f $nic/address && $(cat "$nic/type") == 1 ]] || continue
              maclist="$maclist,\"$(cat "$nic/address")\""
          done
          printf '[%s]' "${maclist#,}"
      }

      if [[ ! -f /etc/systemd/network/20-bootif.network ]]; then
          get_param() {
              [[ $(cat /proc/cmdline) =~ $1 ]] && echo "${BASH_REMATCH[1]}"
          }

          dhcp_param() {
              [[ $(cat /var/lib/dhclient/dhclient.leases) =~ $1 ]] && echo "${BASH_REMATCH[1]}"
          }


      # Since we are not using normal networking, make sure that
      # dhclient will stick around forever even if we exit
          cat >"/etc/systemd/system/dhclient-$BOOTDEV.service" << EOF
      [Unit]
      Description=dhclient for $BOOTDEV.service
      After=network-online.target
      Wants=network-online.target

      [Service]
      Type=simple
      ExecStart=/sbin/dhclient --no-pid -d $BOOTDEV

      [Install]
      WantedBy=multi-user.target
      EOF

          systemctl daemon-reload
          dhclient -x
          systemctl start "dhclient-$BOOTDEV"
          sleep 5

          # Stuff from sledgehammer file that makes this command debuggable
          # Some useful boot parameter matches
          ip_re='([0-9a-f.:]+/[0-9]+)'
          host_re='rs\.uuid=([^ ]+)'
          hostname_re='option host-name "([^"]+)'
          fixed_ip='fixed-address ([0-9a-f.:]+)'
          uuid_re='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$'
          netname_re='"network":"([^ ]+)"'

          # Assume nothing about the hostname.
          unset HOSTNAME

          # Check for DHCP set host name.  Expand it to a FQDN if needed.
          if dhcp_hostname="$(dhcp_param "$hostname_re")"; then
              echo "Hostname set by DHCP to $dhcp_hostname"
              if [[ ${dhcp_hostname%%.*} == $dhcp_hostname ]]; then
                  HOSTNAME="${dhcp_hostname}.${DOMAIN}"
              else
                  HOSTNAME="$dhcp_hostname"
              fi
          else
              dhcp_ip="$(dhcp_param "$fixed_ip")"
              if [[ $dhcp_ip != "" ]]  ; then
                  lookup_1=$(getent hosts $dhcp_ip | awk '{print $2}')
                  lookup_2=$(getent hosts $dhcp_ip | awk '{print $2}')
                  if [[ $lookup_1 && $lookup_1 == $lookup_2 && $lookup_1 != localhost* ]]; then
                      HOSTNAME=$lookup_1
                  fi
              fi
          fi
      fi
      # Perform minimal required bootstrapping for discovery
      export RS_TOKEN="{{.GenerateToken}}"
      export RS_ENDPOINT="{{.ApiURL}}"
      mkdir -p /usr/local/bin
      grep -q '/usr/local/bin' <<< "$PATH" || export PATH="$PATH:/usr/local/bin"
      for tool in drpcli jq; do
          which "$tool" &>/dev/null && continue
          echo "Installing $tool in /usr/local/bin"
          case $tool in
              drpcli) curl -gsfLo "/usr/local/bin/$tool" "{{.ProvisionerURL}}/files/drpcli.amd64.linux";;
              jq)     curl -gsfLo "/usr/local/bin/$tool" "{{.ProvisionerURL}}/files/jq";;
          esac
          chmod 755 "/usr/local/bin/$tool"
      done
      unset tool

      # See if we have already been created.
      if [[ $(cat /proc/cmdline) =~ $host_re ]]; then
          RS_UUID="${BASH_REMATCH[1]}"
          json="$(drpcli machines show "$RS_UUID")"
          # If we did not get a hostname from DHCP, get it from DigitalRebar Provision.
          if [[ ! $HOSTNAME ]]; then
              HOSTNAME="$(jq -r '.Name' <<< "$json")"
          fi
      else
          # If we did not get a hostname from DHCP, generate one for ourselves.
          [[ $HOSTNAME ]] || HOSTNAME="d${MAC//:/-}.${DOMAIN}"
          IP=""
          bootdev_ip4_re='inet ([0-9.]+)/([0-9]+)'
          bootdev_ip6_re='inet6 ([0-9a-fA-F:.]+)/([0-9]+) scope global'
          if [[ $(ip -4 -o addr show dev $BOOTDEV) =~ $bootdev_ip4_re ]]; then
              IP="${BASH_REMATCH[1]}"
          else
              if [[ $(ip -6 -o addr show dev $BOOTDEV) =~ $bootdev_ip6_re ]]; then
                  IP="${BASH_REMATCH[1]}"
              fi
          fi

          # Create a new node for us,
          # Add the default noderoles we will need, and
          # Let the annealer do its thing.
          while ! json="$(drpcli machines create "{\"Name\": \"$HOSTNAME\",
                                               \"Address\": \"$IP\",
                                               \"HardwareAddrs\": $(get_macs)}")"; do
              echo "We could not create a node for ourself, trying again."
              sleep 5
          done
          RS_UUID="$(jq -r '.Uuid' <<< "$json")"

      fi
      echo "${RS_UUID}" > /etc/rs-uuid
      # Set our hostname for everything else.
      if [ -f /etc/sysconfig/network ] ; then
          sed -i -e "s/HOSTNAME=.*/HOSTNAME=${HOSTNAME}/" /etc/sysconfig/network
      fi
      echo "${HOSTNAME#*.}" >/etc/domainname
      hostname "$HOSTNAME"

      {{template "profile.tmpl" .}}

      # Force reliance on DNS
      echo '127.0.0.1 localhost' >/etc/hosts

      if ! curl -g -s -f -L -o /tmp/control.sh "$PROVISIONER_WEB/machines/$RS_UUID/control.sh" && \
          grep -q '^exit 0$' /tmp/control.sh && \
          head -1 /tmp/control.sh | grep -q '^#!/bin/bash'; then
          echo "Could not load our control.sh!"
          exit 1
      fi
      chmod 755 /tmp/control.sh

      export RS_UUID BOOTDEV PROVISIONER_WEB MAC DOMAIN DNS_SERVERS HOSTNAME

      echo "transfer from start-up to control script"

      [[ -x /tmp/control.sh ]] && exec /tmp/control.sh

      echo "Did not get control.sh from $PROVISIONER_WEB/machines/$RS_UUID/control.sh"
      exit 1
Meta:
  feature-flags: "change-stage-v2"
  icon: "binoculars"
  color: "blue"
  title: "Digital Rebar Community Content"
